filter {
    if [type] == "datahead_access" {
        grok {
            match => { "message" => "^%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:thread_name} %{IPORHOST:server_host}:%{POSINT:server_port} %{IPORHOST:client_host}:%{POSINT:client_port} %{NOTSPACE:user} %{WORD:verb} %{NOTSPACE:namespace} %{NOTSPACE:bucket}%{SPACE}%{NOTSPACE:object} ((?<query_string>[^-\s]+)|-) %{DATA}/%{DATA} %{NUMBER:status:int} %{NUMBER:resp_time_ms:int} (?:%{NUMBER:bytes_ingress:int}|-) (?:%{NUMBER:bytes_egress:int}|-)( %{NUMBER:storage_time_ms:int})?((( 'X-Forwarded-For: (%{IPORHOST:client_host}|-)')|( 'User-Agent: (?<user_agent>[^']+)'))*)?%{GREEDYDATA:log_message}" }
            add_tag => [ "request_log" ]
            overwrite => ["client_host" ]
            add_field => {
                "method" => "%{verb}"
                "log_level" => "INFO"
                "clientip" => "%{client_host}"
            }
        }

        if [resp_time_ms] {
          mutate { add_field => { "duration" => "%{resp_time_ms}" } }
        }
        if [bytes_egress] { 
            mutate { add_field => { "download" => "%{bytes_egress}" } }         
        }
        if [bytes_ingress] {
            mutate { add_field => { "upload" => "%{bytes_ingress}" } }
        }

        date {
            match => [ "timestamp" , "ISO8601" ]
            timezone => "UTC"
        }
      
        mutate {
            remove_field => [ "timestamp" ]
            remove_field => [ "log_message" ]
        }

        mutate {
            replace => { type => "accesslog" }
        }

    }
}

